
==================== FINAL INTERFACE ====================
2017-09-11 23:38:50.822438 UTC

interface w6-0.1.0.0-W9Ugrx6kTHIl3x6l8azM:Task4 8002
  interface hash: c3548ab929e9da579424b273d732ceca
  ABI hash: ab825ae8f2ff3915af94b47e182b1410
  export-list hash: e84b34f29c25d365b30e86d859dd4b4c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ee3a22745cb83f55fa9f4a8b5ede5421
  sig of: Nothing
  used TH splices: False
  where
exports:
  Task4.add
  Task4.askMany
  Task4.askMany'
  Task4.fromGP
  Task4.get
  Task4.get'
  Task4.put
  Task4.put'
  Task4.run
  Task4.simulate
  Task4.simulate'
  Task4.testFromTo
  Task4.testaskMany
  Task4.testaskMany'
  Task4.toGP
  Task4.GP{Task4.End Task4.Get Task4.Put}
  Task4.GP'{Task4.GP' unGP'}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
c791c12191c39e84829d0e520afd4323
  $fApplicativeGP :: GHC.Base.Applicative Task4.GP
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Task4.GP
                  Task4.$fFunctorGP
                  Task4.$fApplicativeGP_$cpure
                  Task4.$fApplicativeGP_$c<*>
                  Task4.$fApplicativeGP_$c*>
                  Task4.$fApplicativeGP_$c<* -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP' :: GHC.Base.Applicative Task4.GP'
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Task4.GP'
                  Task4.$fFunctorGP'
                  Task4.$fApplicativeGP'_$creturn
                  Task4.$fApplicativeGP'_$c<*>
                  Task4.$fApplicativeGP'_$c*>
                  Task4.$fApplicativeGP'_$c<* -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'1 ::
    Task4.GP' a
    -> Task4.GP' b -> forall b1. (a -> Task4.GP b1) -> Task4.GP b1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: Task4.GP' a)
                   (eta1 :: Task4.GP' b)
                   @ b1
                   (eta2 :: a -> Task4.GP b1) ->
                 eta `cast` (Task4.N:GP'[0] <a>_R)
                   @ b1
                   (\ (y :: a) ->
                    eta1 `cast` (Task4.N:GP'[0] <b>_R)
                      @ b1
                      (\ (y1 :: b) -> eta2 y))) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'2 ::
    Task4.GP' a
    -> Task4.GP' b -> forall b1. (b -> Task4.GP b1) -> Task4.GP b1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: Task4.GP' a)
                   (eta1 :: Task4.GP' b)
                   @ b1
                   (eta2 :: b -> Task4.GP b1) ->
                 eta `cast` (Task4.N:GP'[0] <a>_R)
                   @ b1
                   (\ (y :: a) ->
                    eta1 `cast` (Task4.N:GP'[0] <b>_R)
                      @ b1
                      (\ (y1 :: b) -> eta2 y1))) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'3 ::
    Task4.GP' (a -> b)
    -> Task4.GP' a -> forall b1. (b -> Task4.GP b1) -> Task4.GP b1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (m1 :: Task4.GP' (a -> b))
                   (m2 :: Task4.GP' a)
                   @ b1
                   (eta :: b -> Task4.GP b1) ->
                 m1 `cast` (Task4.N:GP'[0] <a -> b>_R)
                   @ b1
                   (\ (y :: a -> b) ->
                    m2 `cast` (Task4.N:GP'[0] <a>_R)
                      @ b1
                      (\ (y1 :: a) -> eta (y y1)))) -}
0ec585c748b23a622ee9a7323745788c
  $fApplicativeGP'4 :: a -> forall b. (a -> Task4.GP b) -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (a1 :: a) @ b (k :: a -> Task4.GP b) -> k a1) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'_$c*> :: Task4.GP' a -> Task4.GP' b -> Task4.GP' b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.$fApplicativeGP'2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Task4.GP' a>_R
                 ->_R <Task4.GP' b>_R
                 ->_R Sym (Task4.N:GP'[0] <b>_R)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'_$c<* :: Task4.GP' a -> Task4.GP' b -> Task4.GP' a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.$fApplicativeGP'1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Task4.GP' a>_R
                 ->_R <Task4.GP' b>_R
                 ->_R Sym (Task4.N:GP'[0] <a>_R)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'_$c<*> ::
    Task4.GP' (a -> b) -> Task4.GP' a -> Task4.GP' b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.$fApplicativeGP'3
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Task4.GP' (a -> b)>_R
                 ->_R <Task4.GP' a>_R
                 ->_R Sym (Task4.N:GP'[0] <b>_R)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fApplicativeGP'_$creturn :: a -> Task4.GP' a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.$fApplicativeGP'4
                  `cast`
                (forall (a :: <*>_N). <a>_R ->_R Sym (Task4.N:GP'[0] <a>_R)) -}
c791c12191c39e84829d0e520afd4323
  $fApplicativeGP_$c*> :: Task4.GP a -> Task4.GP b -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: Task4.GP a) (eta1 :: Task4.GP b) ->
                 Task4.$fApplicativeGP_$c<*>
                   @ b
                   @ b
                   (Task4.$fApplicativeGP_$c>>=
                      @ a
                      @ (b -> b)
                      eta
                      (\ (x1 :: a) -> Task4.End @ (b -> b) (GHC.Base.breakpoint @ b)))
                   eta1) -}
c791c12191c39e84829d0e520afd4323
  $fApplicativeGP_$c<* :: Task4.GP a -> Task4.GP b -> Task4.GP a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: Task4.GP a) (eta1 :: Task4.GP b) ->
                 Task4.$fApplicativeGP_$c<*>
                   @ b
                   @ a
                   (Task4.$fApplicativeGP_$c>>=
                      @ a
                      @ (b -> a)
                      eta
                      (\ (x1 :: a) -> Task4.End @ (b -> a) (\ (ds :: b) -> x1)))
                   eta1) -}
c791c12191c39e84829d0e520afd4323
  $fApplicativeGP_$c<*> ::
    Task4.GP (a -> b) -> Task4.GP a -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (m1 :: Task4.GP (a -> b))
                   (m2 :: Task4.GP a) ->
                 Task4.$fApplicativeGP_$c>>=
                   @ (a -> b)
                   @ b
                   m1
                   (\ (x1 :: a -> b) ->
                    Task4.$fApplicativeGP_$c>>=
                      @ a
                      @ b
                      m2
                      (\ (x2 :: a) -> Task4.End @ b (x1 x2)))) -}
c791c12191c39e84829d0e520afd4323
  $fApplicativeGP_$c>>= ::
    Task4.GP a -> (a -> Task4.GP b) -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U)> -}
c791c12191c39e84829d0e520afd4323
  $fApplicativeGP_$cpure :: a -> Task4.GP a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True) Task4.End -}
c791c12191c39e84829d0e520afd4323
  $fFunctorGP :: GHC.Base.Functor Task4.GP
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Task4.GP Task4.$fFunctorGP_$cfmap Task4.$fFunctorGP_$c<$ -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fFunctorGP' :: GHC.Base.Functor Task4.GP'
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Task4.GP' Task4.$fFunctorGP'_$cfmap Task4.$fFunctorGP'_$c<$ -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fFunctorGP'1 ::
    a -> Task4.GP' b -> forall b1. (a -> Task4.GP b1) -> Task4.GP b1
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Task4.GP' b)
                   @ b1
                   (eta2 :: a -> Task4.GP b1) ->
                 eta1 `cast` (Task4.N:GP'[0] <b>_R)
                   @ b1
                   (\ (y :: b) -> eta2 eta)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fFunctorGP'2 ::
    (a -> b)
    -> Task4.GP' a -> forall b1. (b -> Task4.GP b1) -> Task4.GP b1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><C(S),1*C1(U)><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f :: a -> b)
                   (m1 :: Task4.GP' a)
                   @ b1
                   (eta :: b -> Task4.GP b1) ->
                 m1 `cast` (Task4.N:GP'[0] <a>_R) @ b1 (\ (y :: a) -> eta (f y))) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fFunctorGP'_$c<$ :: a -> Task4.GP' b -> Task4.GP' a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.$fFunctorGP'1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R ->_R <Task4.GP' b>_R ->_R Sym (Task4.N:GP'[0] <a>_R)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fFunctorGP'_$cfmap :: (a -> b) -> Task4.GP' a -> Task4.GP' b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><C(S),1*C1(U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b -> Task4.$fFunctorGP'2 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R ->_R <Task4.GP' a>_R ->_R Sym (Task4.N:GP'[0] <b>_R)) -}
c791c12191c39e84829d0e520afd4323
  $fFunctorGP_$c<$ :: a -> Task4.GP b -> Task4.GP a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: Task4.GP b) ->
                 Task4.$fApplicativeGP_$c>>=
                   @ b
                   @ a
                   eta1
                   (\ (x1 :: b) -> Task4.End @ a eta)) -}
c791c12191c39e84829d0e520afd4323
  $fFunctorGP_$cfmap :: (a -> b) -> Task4.GP a -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (f :: a -> b) (m1 :: Task4.GP a) ->
                 Task4.$fApplicativeGP_$c>>=
                   @ a
                   @ b
                   m1
                   (\ (x1 :: a) -> Task4.End @ b (f x1))) -}
c791c12191c39e84829d0e520afd4323
  $fMonadGP :: GHC.Base.Monad Task4.GP
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Task4.GP
                  Task4.$fMonadGP_$cp1Monad
                  Task4.$fApplicativeGP_$c>>=
                  Task4.$fMonadGP_$c>>
                  Task4.End
                  Task4.$fMonadGP_$s$dmfail -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fMonadGP' :: GHC.Base.Monad Task4.GP'
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Task4.GP'
                  Task4.$fMonadGP'_$cp1Monad
                  Task4.$fMonadGP'_$c>>=
                  Task4.$fMonadGP'_$c>>
                  Task4.$fApplicativeGP'_$creturn
                  Task4.$fMonadGP'_$s$dmfail -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fMonadGP'1 ::
    Task4.GP' a
    -> (a -> Task4.GP' b)
    -> forall b1. (b -> Task4.GP b1) -> Task4.GP b1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (a1 :: Task4.GP' a)
                   (b1 :: a -> Task4.GP' b)
                   @ b2
                   (eta :: b -> Task4.GP b2) ->
                 a1 `cast` (Task4.N:GP'[0] <a>_R)
                   @ b2
                   (\ (y :: a) -> (b1 y) `cast` (Task4.N:GP'[0] <b>_R) @ b2 eta)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fMonadGP'_$c>> :: Task4.GP' a -> Task4.GP' b -> Task4.GP' b
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Task4.GP' a)
                   (k :: Task4.GP' b)
                   @ b1
                   (eta :: b -> Task4.GP b1) ->
                 (Task4.$fMonadGP'_$c>>= @ a @ b m1 (\ (ds :: a) -> k))
                   `cast`
                 (Task4.N:GP'[0] <b>_R)
                   @ b1
                   eta)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Task4.GP' a>_R
                 ->_R <Task4.GP' b>_R
                 ->_R Sym (Task4.N:GP'[0] <b>_R)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fMonadGP'_$c>>= ::
    Task4.GP' a -> (a -> Task4.GP' b) -> Task4.GP' b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(C1(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Task4.$fMonadGP'1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Task4.GP' a>_R
                 ->_R <a -> Task4.GP' b>_R
                 ->_R Sym (Task4.N:GP'[0] <b>_R)) -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fMonadGP'_$cp1Monad :: GHC.Base.Applicative Task4.GP'
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Task4.$fApplicativeGP' -}
4caec71a6ded5fb1aecf207b2bfb74f3
  $fMonadGP'_$s$dmfail :: GHC.Base.String -> Task4.GP' a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (-1, True, True)
                (\ @ a (s :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.PtrRepLifted
                   @ (Task4.GP' a)
                   s) -}
c791c12191c39e84829d0e520afd4323
  $fMonadGP_$c>> :: Task4.GP a -> Task4.GP b -> Task4.GP b
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (m1 :: Task4.GP a) (k :: Task4.GP b) ->
                 Task4.$fApplicativeGP_$c>>= @ a @ b m1 (\ (ds :: a) -> k)) -}
c791c12191c39e84829d0e520afd4323
  $fMonadGP_$cp1Monad :: GHC.Base.Applicative Task4.GP
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Task4.$fApplicativeGP -}
c791c12191c39e84829d0e520afd4323
  $fMonadGP_$s$dmfail :: GHC.Base.String -> Task4.GP a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (-1, True, True)
                (\ @ a (s :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.PtrRepLifted
                   @ (Task4.GP a)
                   s) -}
73e4880e54933e6db3a0fe5fa8330bd3
  $tc'End :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17971576939891879209##
                   14765874299704805715##
                   Task4.$trModule
                   Task4.$tc'End1) -}
1458dfdcecd3a373eec0fd290ca36e1e
  $tc'End1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'End"#) -}
c38b7b24556ce03626191c0848d52ba1
  $tc'GP' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4086893902750507574##
                   15437540217960137756##
                   Task4.$trModule
                   Task4.$tc'GP'1) -}
8c2aafe42232129f31ad32895d8e4cca
  $tc'GP'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GP'"#) -}
4ca09c00e365bc47288fd3c3dff5b46c
  $tc'Get :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17097063047209995072##
                   6042636128921329957##
                   Task4.$trModule
                   Task4.$tc'Get1) -}
428493c3afeca0ddcbbe46f3367faa05
  $tc'Get1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Get"#) -}
64cd25da6c61f7fdb732c835b7ae6ff5
  $tc'Put :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4295220400032001076##
                   16994675229828505113##
                   Task4.$trModule
                   Task4.$tc'Put1) -}
4991d397282a3fa7295e28204fe18a76
  $tc'Put1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Put"#) -}
f638553b1e5b4c68f5781f314cea4356
  $tcGP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2042294408671222986##
                   10386449859491234027##
                   Task4.$trModule
                   Task4.$tcGP1) -}
b15f025b824b7085d0c4f57b7347ee2e
  $tcGP' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5183593950908435613##
                   3189831013597192856##
                   Task4.$trModule
                   Task4.$tcGP'1) -}
f0c9ec4537fdd75077a07fc29098040b
  $tcGP'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GP'"#) -}
dbd8c32049147c262c7396e07b3a5345
  $tcGP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GP"#) -}
64fddc64c794f613f8a3a48837806068
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Task4.$trModule2 Task4.$trModule1) -}
595214d6348318e3944256ceb695022b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Task4"#) -}
544af57da688f3cff539084c710916ba
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "w6-0.1.0.0-W9Ugrx6kTHIl3x6l8azM"#) -}
337497cd5b7a0961b863e0c5083fd6c6
  $waskMany :: GHC.Prim.Int# -> Task4.GP GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
605d13288b3381efacddea4da15804af
  $waskMany' ::
    GHC.Prim.Int#
    -> forall b. (GHC.Types.Int -> Task4.GP b) -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U)>,
     Inline: [0] -}
c791c12191c39e84829d0e520afd4323
  data GP a
    = End a
    | Get (GHC.Types.Int -> Task4.GP a)
    | Put GHC.Types.Int (Task4.GP a)
4caec71a6ded5fb1aecf207b2bfb74f3
  newtype GP' a
    = GP' {unGP' :: forall b. (a -> Task4.GP b) -> Task4.GP b}
f8e5fc58c08c0ed7716178ff76df9428
  add :: Task4.GP ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Task4.Get @ () Task4.add1) -}
845b0d344a15ae28b0c911cf3c7d1bf0
  add1 :: GHC.Types.Int -> Task4.GP ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Task4.Get
                   @ ()
                   (\ (m :: GHC.Types.Int) ->
                    Task4.Put @ () (GHC.Num.$fNumInt_$c+ m n) Task4.add2)) -}
542ad47f39b45c04c1a4667a99a7a827
  add2 :: Task4.GP ()
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Task4.End @ () GHC.Tuple.()) -}
d7a06684e7cd79a53df3d5b5b74ccd4b
  askMany :: GHC.Types.Int -> Task4.GP GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Task4.$waskMany ww1 }) -}
da2d840eff63789a0cc770961f543839
  askMany' :: GHC.Types.Int -> Task4.GP' GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.askMany'1
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Task4.N:GP'[0] <GHC.Types.Int>_R)) -}
9aee10b4874f5bfb69e9b512bc5e93c5
  askMany'1 ::
    GHC.Types.Int
    -> forall b. (GHC.Types.Int -> Task4.GP b) -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) @ b (w1 :: GHC.Types.Int -> Task4.GP b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Task4.$waskMany' ww1 @ b w1 }) -}
5a80fb9b123d8d4b944934faaeeb908f
  fromGP :: Task4.GP a -> Task4.GP' a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Task4.fromGP1
                  `cast`
                (forall (a :: <*>_N).
                 <Task4.GP a>_R ->_R Sym (Task4.N:GP'[0] <a>_R)) -}
d8e8a3486c783d09bba6cc2408f06fd4
  fromGP1 :: Task4.GP a -> forall b. (a -> Task4.GP b) -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (u :: Task4.GP a) @ b (eta :: a -> Task4.GP b) ->
                 Task4.$fApplicativeGP_$c>>= @ a @ b u eta) -}
9ff6043f8094a14281a622c354be3e0e
  get :: Task4.GP GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Task4.Get
                   @ GHC.Types.Int
                   (Task4.End @ GHC.Types.Int)) -}
04cc2bae002e4b73f97f2ee626378e5f
  get' :: Task4.GP' GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                Task4.get'1 `cast` (Sym (Task4.N:GP'[0] <GHC.Types.Int>_R)) -}
ffbe8b4e6af2c487a4dd5ac7624aae1f
  get'1 :: (GHC.Types.Int -> Task4.GP b) -> Task4.GP b
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ b ->
                 Task4.$fApplicativeGP_$c>>= @ GHC.Types.Int @ b Task4.get) -}
ffe4e3680044f63706dd7380da2b2a77
  put :: GHC.Types.Int -> Task4.GP ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: GHC.Types.Int) -> Task4.Put @ () x1 Task4.add2) -}
98ed34d7b29b050f6add33b3d609ab44
  put' :: GHC.Types.Int -> Task4.GP' ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Task4.put'1
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Task4.N:GP'[0] <()>_R)) -}
d5d9f34cfb993d44d029b2fc26b201ee
  put'1 ::
    GHC.Types.Int -> forall b. (() -> Task4.GP b) -> Task4.GP b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (n :: GHC.Types.Int) @ b (eta :: () -> Task4.GP b) ->
                 Task4.$fApplicativeGP_$c>>=
                   @ ()
                   @ b
                   (Task4.Put @ () n Task4.add2)
                   eta) -}
af13b9d99c033edd183d81ece90dc67b
  run :: Task4.GP a -> GHC.Types.IO a
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Task4.run1
                  `cast`
                (forall (a :: <*>_N).
                 <Task4.GP a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
c97b8c96d2b9ee2ef0774a65637ee3bf
  run1 ::
    Task4.GP a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
9296497a3a04adc5f6598209613a6268
  simulate :: Task4.GP a -> [GHC.Types.Int] -> a
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
688020659c2cbcdb2845e6c4a37e7d1b
  simulate' :: Task4.GP' a -> [GHC.Types.Int] -> a
  {- Arity: 1, Strictness: <L,1*C1(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (gp :: Task4.GP' a) ->
                 Task4.simulate
                   @ a
                   (gp `cast` (Task4.N:GP'[0] <a>_R) @ a (Task4.End @ a))) -}
3c9deb01136f6ee36c41192c81b732e7
  testFromTo :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Task4.testFromTo1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
81b55bff06e8063962b27d30d2609ce7
  testFromTo1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Task4.run1 @ () Task4.testFromTo2) -}
6bd6c6ce575893edf6b7520018d79bbe
  testFromTo2 :: Task4.GP ()
  {- Unfolding: (Task4.$fApplicativeGP_$c>>=
                   @ ()
                   @ ()
                   Task4.add
                   (Task4.End @ ())) -}
03b1c4ae27fdfeddd5a9d4d5e4f43b8b
  testaskMany :: GHC.Types.Int
  {- Unfolding: (Task4.simulate
                   @ GHC.Types.Int
                   Task4.testaskMany1
                   Task4.testaskMany_xs) -}
4d5ae988de475dde548a2303c35d5d6a
  testaskMany' :: GHC.Types.Int
  {- Unfolding: (Task4.simulate
                   @ GHC.Types.Int
                   Task4.testaskMany'1
                   Task4.testaskMany'_xs) -}
fbf19dd81cc1b5207e52536a944f248d
  testaskMany'1 :: Task4.GP GHC.Types.Int
  {- Unfolding: (Task4.$waskMany'
                   100000#
                   @ GHC.Types.Int
                   (Task4.End @ GHC.Types.Int)) -}
1f47276bfe85052e22d68652eae21027
  testaskMany'_xs :: [GHC.Types.Int]
  {- HasNoCafRefs -}
74eccf117bfe6a6e1cedb426b9ea0476
  testaskMany1 :: Task4.GP GHC.Types.Int
  {- Unfolding: (Task4.$waskMany 100000#) -}
d15fbbd14aa9341680e19ec87b9fb1c0
  testaskMany_xs :: [GHC.Types.Int]
  {- HasNoCafRefs -}
bb6025b247d1692bd1250410f0f1a809
  toGP :: Task4.GP' a -> Task4.GP a
  {- Arity: 1, HasNoCafRefs, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (x1 :: Task4.GP' a) ->
                 x1 `cast` (Task4.N:GP'[0] <a>_R) @ a (Task4.End @ a)) -}
5ab8365855600cf676f0708a0c55b1ac
  unGP' :: Task4.GP' a -> forall b. (a -> Task4.GP b) -> Task4.GP b
  RecSel Left Task4.GP'
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (dk :: Task4.GP' a) @ b ->
                 dk `cast` (Task4.N:GP'[0] <a>_R) @ b) -}
instance [safe] GHC.Base.Applicative [Task4.GP]
  = Task4.$fApplicativeGP
instance [safe] GHC.Base.Applicative [Task4.GP']
  = Task4.$fApplicativeGP'
instance [safe] GHC.Base.Functor [Task4.GP] = Task4.$fFunctorGP
instance [safe] GHC.Base.Functor [Task4.GP'] = Task4.$fFunctorGP'
instance [safe] GHC.Base.Monad [Task4.GP] = Task4.$fMonadGP
instance [safe] GHC.Base.Monad [Task4.GP'] = Task4.$fMonadGP'
"SPEC/Task4 $dmfail @ GP" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                        Task4.GP)
  GHC.Base.$dmfail @ Task4.GP $dMonad = Task4.$fMonadGP_$s$dmfail
"SPEC/Task4 $dmfail @ GP'" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                         Task4.GP')
  GHC.Base.$dmfail @ Task4.GP' $dMonad = Task4.$fMonadGP'_$s$dmfail
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False


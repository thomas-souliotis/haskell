
==================== FINAL INTERFACE ====================
2017-09-18 19:00:17.401617 UTC

interface w7-0.1.0.0-bXxXCuABYP3q6A8oPpwOS:Task2 8002
  interface hash: db1c331f635c3b4c4346c48e59b2b600
  ABI hash: 4a1038c0a9f6dd86fe6a2d23bb1704d1
  export-list hash: eaeed18cc6ed4adadec54078214f0b6b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b2c8879a613db2b9f2ef553036d16e5b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Task2.both
  Task2.dropping
  Task2.each
  Task2.element
  Task2.filtering
  Task2.fromFunList
  Task2.fromFunList'
  Task2.fromList
  Task2.fuse
  Task2.heading
  Task2.heading'
  Task2.ignored
  Task2.over
  Task2.set
  Task2.singleton
  Task2.tailing
  Task2.taking
  Task2.toFunList
  Task2.toList
  Task2.transform
  Task2.FunList{Task2.Done Task2.More}
  Task2.Traversal
  Task2.Traversal'
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Functor.Identity 6ee67943d44d50091e12d22df04741f0
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
97a45f7bf2659cf51f6d5d7060dc74cb
  $fApplicativeFunList :: GHC.Base.Applicative (Task2.FunList a b)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Task2.FunList a b)
                  (Task2.$fFunctorFunList @ a @ b)
                  (Task2.Done @ a @ b)
                  (Task2.$fApplicativeFunList_$c<*> @ a @ b)
                  (Task2.$fApplicativeFunList_$c*> @ a @ b)
                  (Task2.$fApplicativeFunList_$c<* @ a @ b) -}
97a45f7bf2659cf51f6d5d7060dc74cb
  $fApplicativeFunList_$c*> ::
    Task2.FunList a b a1
    -> Task2.FunList a b b1 -> Task2.FunList a b b1
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ a1
                   @ b1
                   (eta :: Task2.FunList a b a1)
                   (eta1 :: Task2.FunList a b b1) ->
                 Task2.$fApplicativeFunList_$c<*>
                   @ a
                   @ b
                   @ b1
                   @ b1
                   (Task2.$fApplicativeFunList_$cfmap
                      @ a
                      @ b
                      @ a1
                      @ (b1 -> b1)
                      (\ (ds :: a1) (eta2 :: b1) -> eta2)
                      eta)
                   eta1) -}
97a45f7bf2659cf51f6d5d7060dc74cb
  $fApplicativeFunList_$c<* ::
    Task2.FunList a b a1
    -> Task2.FunList a b b1 -> Task2.FunList a b a1
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   @ a1
                   @ b1
                   (eta :: Task2.FunList a b a1)
                   (eta1 :: Task2.FunList a b b1) ->
                 Task2.$fApplicativeFunList_$c<*>
                   @ a
                   @ b
                   @ b1
                   @ a1
                   (Task2.$fApplicativeFunList_$cfmap
                      @ a
                      @ b
                      @ a1
                      @ (b1 -> a1)
                      (GHC.Base.const @ a1 @ b1)
                      eta)
                   eta1) -}
97a45f7bf2659cf51f6d5d7060dc74cb
  $fApplicativeFunList_$c<*> ::
    Task2.FunList a b (a1 -> b1)
    -> Task2.FunList a b a1 -> Task2.FunList a b b1
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
97a45f7bf2659cf51f6d5d7060dc74cb
  $fApplicativeFunList_$cfmap ::
    (a1 -> b1) -> Task2.FunList a b a1 -> Task2.FunList a b b1
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
97a45f7bf2659cf51f6d5d7060dc74cb
  $fFunctorFunList :: GHC.Base.Functor (Task2.FunList a b)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a @ b.
                  @ (Task2.FunList a b)
                  (Task2.$fApplicativeFunList_$cfmap @ a @ b)
                  (Task2.$fFunctorFunList_$c<$ @ a @ b) -}
97a45f7bf2659cf51f6d5d7060dc74cb
  $fFunctorFunList_$c<$ ::
    a1 -> Task2.FunList a b b1 -> Task2.FunList a b a1
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ a1 @ b1 (eta :: a1) (eta1 :: Task2.FunList a b b1) ->
                 Task2.$fApplicativeFunList_$cfmap
                   @ a
                   @ b
                   @ b1
                   @ a1
                   (\ (ds :: b1) -> eta)
                   eta1) -}
e7c16c0464e8856282e4a2d61d54dee9
  $tc'Done :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15482045398406782484##
                   6605593108367727548##
                   Task2.$trModule
                   Task2.$tc'Done1) -}
21963a96e620fcfc883b064e064a06e2
  $tc'Done1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Done"#) -}
279cfc9e4df8cb5109a2d165fe6cbca7
  $tc'More :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13678587118461822929##
                   6193738870957239775##
                   Task2.$trModule
                   Task2.$tc'More1) -}
22623d26b7cb58b125c161d5ecc89b7d
  $tc'More1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'More"#) -}
389d0039d2ce60ea86b38bbbfe0072c6
  $tcFunList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15008892462936134823##
                   494079517656122090##
                   Task2.$trModule
                   Task2.$tcFunList1) -}
c869225d8f9ddaa9f085d14fdbd62502
  $tcFunList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FunList"#) -}
cc8b5cc304c211011c1dc2ece5028766
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Task2.$trModule2 Task2.$trModule1) -}
d510441b7472939586c075b746b78562
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Task2"#) -}
cb1235dd5cae09b46c3bcac5b0eb8ab5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "w7-0.1.0.0-bXxXCuABYP3q6A8oPpwOS"#) -}
a139653071ae7a5f192ccf771897c522
  $wboth ::
    GHC.Base.Applicative f => (a -> f b) -> a -> a -> f (b, b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),U(1*U(1*C1(C1(U)),A),A,1*C1(C1(U)),A,A)><L,C(U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ (f :: * -> *)
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (ww :: a)
                   (ww1 :: a) ->
                 GHC.Base.<*>
                   @ f
                   w
                   @ b
                   @ (b, b)
                   (GHC.Base.fmap
                      @ f
                      (GHC.Base.$p1Applicative @ f w)
                      @ b
                      @ (b -> (b, b))
                      (GHC.Tuple.(,) @ b @ b)
                      (w1 ww))
                   (w1 ww1)) -}
fea155f170c96b397d6146fd8322e8d8
  $wf :: GHC.Prim.Int# -> Task2.FunList a a t -> Task2.FunList a a t
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
fd9a5fd35412db5d46d9c94557c10c70
  $wf1 :: GHC.Prim.Int# -> Task2.FunList a a t -> Task2.FunList a a t
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
bdd277815d50bf9648119214b11e6b64
  $wheading' :: Task2.FunList a a t -> (# t #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
97a45f7bf2659cf51f6d5d7060dc74cb
  data FunList a b t = Done t | More a (Task2.FunList a b (b -> t))
7793a44e14bc0b79636bf5e70662f7cf
  type Traversal s t a b =
    forall (f :: * -> *).
    GHC.Base.Applicative f =>
    (a -> f b) -> s -> f t
e7e1c7d35cfe926f74d04a089b087303
  type Traversal' s a = Task2.Traversal s s a a
2a5dd7406befc55ed53ba8365800253d
  both :: Task2.Traversal (a, a) (b, b) a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),U(1*U(1*C1(C1(U)),A),A,1*C1(C1(U)),A,A)><L,C(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ (f :: * -> *)
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (w2 :: (a, a)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 Task2.$wboth @ a @ b @ f w w1 ww1 ww2 }) -}
4ff2a9af24ad5bcd1cada674256ec2b4
  dropping ::
    GHC.Types.Int -> Task2.Traversal' s a -> Task2.Traversal' s a
  {- Arity: 3,
     Strictness: <L,U(U)><L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ s
                   @ a
                   (dk :: GHC.Types.Int)
                   (dk1 :: Task2.Traversal' s a)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a a s
                   = dk1
                       @ (Task2.FunList a a)
                       (Task2.$fApplicativeFunList @ a @ a)
                       (Task2.singleton @ a @ a)
                 } in
                 \ (eta :: a -> f a) (eta1 :: s) ->
                 case dk of ww { GHC.Types.I# ww1 ->
                 Task2.fromFunList'
                   @ f
                   @ a
                   @ a
                   @ s
                   $dApplicative
                   eta
                   (Task2.$wf @ a @ s ww1 (g eta1)) }) -}
c798e69321cad0826b15a2dd2e981264
  each ::
    Data.Traversable.Traversable t => Task2.Traversal (t a) (t b) a b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(S)LLL),1*U(A,A,1*C1(U),A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ a
                   @ b
                   ($dTraversable :: Data.Traversable.Traversable t)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 Data.Traversable.traverse
                   @ t
                   $dTraversable
                   @ f
                   @ a
                   @ b
                   $dApplicative) -}
72958aced09b4dc956d465231395f192
  element ::
    GHC.Types.Int -> Task2.Traversal' s a -> Task2.Traversal' s a
  {- Arity: 3,
     Strictness: <L,U(U)><L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ s
                   @ a
                   (dk :: GHC.Types.Int)
                   (dk1 :: Task2.Traversal' s a)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a a s
                   = dk1
                       @ (Task2.FunList a a)
                       (Task2.$fApplicativeFunList @ a @ a)
                       (Task2.singleton @ a @ a)
                 } in
                 \ (eta :: a -> f a) (eta1 :: s) ->
                 Task2.fromFunList'
                   @ f
                   @ a
                   @ a
                   @ s
                   $dApplicative
                   eta
                   (Task2.element_f @ a @ s dk (g eta1))) -}
269b88f3361b899322b1067fad5a121d
  element_f ::
    GHC.Types.Int -> Task2.FunList a a t -> Task2.FunList a a t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*U)><S,1*U> -}
dd989d0686ba04b70510e95690d59415
  filtering ::
    (a -> GHC.Types.Bool)
    -> Task2.Traversal' s a -> Task2.Traversal' s a
  {- Arity: 3,
     Strictness: <L,C(U)><L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ a
                   @ s
                   (dk :: a -> GHC.Types.Bool)
                   (dk1 :: Task2.Traversal' s a)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a a s
                   = dk1
                       @ (Task2.FunList a a)
                       (Task2.$fApplicativeFunList @ a @ a)
                       (Task2.singleton @ a @ a)
                 } in
                 \ (eta :: a -> f a) (eta1 :: s) ->
                 Task2.fromFunList'
                   @ f
                   @ a
                   @ a
                   @ s
                   $dApplicative
                   eta
                   (Task2.filtering_f @ a @ s dk (g eta1))) -}
6f1c3b10ffc526db1bb503a7b56f0135
  filtering_f ::
    (a -> GHC.Types.Bool) -> Task2.FunList a a t -> Task2.FunList a a t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
92ff92f372462efea22d9179ed499763
  fromFunList ::
    (s -> Task2.FunList a b t) -> Task2.Traversal s t a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><S,U(A,C(U),C(C1(U)),A,A)><L,C(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ s
                   @ a
                   @ b
                   @ t
                   (dk :: s -> Task2.FunList a b t)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: a -> f b)
                   (eta1 :: s) ->
                 Task2.fromFunList' @ f @ a @ b @ t $dApplicative eta (dk eta1)) -}
937c13ee5b915b3c59430d46fa8d33b9
  fromFunList' ::
    GHC.Base.Applicative f => (a -> f b) -> Task2.FunList a b t -> f t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(A,C(U),C(C1(U)),A,A)><L,C(U)><S,1*U> -}
03f2f71060569f5dd21e07cd71f088ff
  fromList :: [a] -> Task2.FunList a b [b]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7b1a3741bf98596f58473ef06141eade
  fuse :: Task2.FunList a a t -> t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1080dffaa2efda64e9c476ce11e57ef5
  heading :: Task2.Traversal' s a -> Task2.Traversal' s a
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ s
                   @ a
                   (dk :: Task2.Traversal' s a)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a a s
                   = dk
                       @ (Task2.FunList a a)
                       (Task2.$fApplicativeFunList @ a @ a)
                       (Task2.singleton @ a @ a)
                 } in
                 \ (eta :: a -> f a) (eta1 :: s) ->
                 case g eta1 of wild {
                   Task2.Done a1
                   -> Task2.fromFunList' @ f @ a @ a @ s $dApplicative eta wild
                   Task2.More a1 b
                   -> Task2.fromFunList'
                        @ f
                        @ a
                        @ a
                        @ s
                        $dApplicative
                        eta
                        (Task2.More @ a @ a @ s a1 (Task2.heading' @ a @ (a -> s) b)) }) -}
00307af61e67dfef49043bbc370a6f43
  heading' :: Task2.FunList a a t -> Task2.FunList a a t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ t (w :: Task2.FunList a a t) ->
                 case Task2.$wheading' @ a @ t w of ww { Unit# ww1 ->
                 Task2.Done @ a @ a @ t ww1 }) -}
02e8f69f04d9ffe3f22bac6583b1e67f
  ignored :: Task2.Traversal' s a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ s
                   @ a
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: a -> f a) ->
                 GHC.Base.pure @ f $dApplicative @ s) -}
ed5c61e0bb0bd5f380bd1236a0fbf96c
  over ::
    ((a -> Data.Functor.Identity.Identity b)
     -> s -> Data.Functor.Identity.Identity t)
    -> (a -> b) -> s -> t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Task2.over1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (s :: <*>_N) (t :: <*>_N).
                 <(a -> Data.Functor.Identity.Identity b)
                  -> s -> Data.Functor.Identity.Identity t>_R
                 ->_R <a -> b>_R
                 ->_R <s>_R
                 ->_R Data.Functor.Identity.N:Identity[0] <t>_R) -}
c6fe3b9766bf567494169a064fc78391
  over1 ::
    ((a -> Data.Functor.Identity.Identity b)
     -> s -> Data.Functor.Identity.Identity t)
    -> (a -> b) -> s -> Data.Functor.Identity.Identity t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ s
                   @ t
                   (sa :: (a -> Data.Functor.Identity.Identity b)
                          -> s -> Data.Functor.Identity.Identity t)
                   (f :: a -> b)
                   (s1 :: s) ->
                 sa
                   (\ (x :: a) -> f x)
                     `cast`
                   (<a>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   s1) -}
a75fbc4657ed52de068d74719e462080
  set ::
    ((a -> Data.Functor.Identity.Identity b)
     -> s -> Data.Functor.Identity.Identity t)
    -> s -> b -> t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Task2.set1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (s :: <*>_N) (t :: <*>_N).
                 <(a -> Data.Functor.Identity.Identity b)
                  -> s -> Data.Functor.Identity.Identity t>_R
                 ->_R <s>_R
                 ->_R <b>_R
                 ->_R Data.Functor.Identity.N:Identity[0] <t>_R) -}
c2c77003d4fec02b99af9f0d3ce6d6ca
  set1 ::
    ((a -> Data.Functor.Identity.Identity b)
     -> s -> Data.Functor.Identity.Identity t)
    -> s -> b -> Data.Functor.Identity.Identity t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ s
                   @ t
                   (sa :: (a -> Data.Functor.Identity.Identity b)
                          -> s -> Data.Functor.Identity.Identity t)
                   (s1 :: s)
                   (a1 :: b) ->
                 sa
                   (\ (x :: a) -> a1)
                     `cast`
                   (<a>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                   s1) -}
a467e2df032608d7ea97ae2809a95575
  singleton :: a -> Task2.FunList a b b
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (a1 :: a) ->
                 Task2.More @ a @ b @ b a1 (Task2.singleton1 @ b @ a)) -}
2b1d196a764ab80df05238fcc6241de6
  singleton1 :: Task2.FunList a b (b -> b)
  {- Unfolding: (\ @ b @ a ->
                 Task2.$fApplicativeFunList_$cfmap
                   @ a
                   @ b
                   @ ()
                   @ (b -> b)
                   (Task2.singleton3 @ b)
                   (Task2.singleton2 @ b @ a)) -}
af90cf746dfd094b753f3741c1de9cf7
  singleton2 :: Task2.FunList a b ()
  {- HasNoCafRefs,
     Unfolding: (\ @ b @ a -> Task2.Done @ a @ b @ () GHC.Tuple.()) -}
9dc529cdfde66d3c5b2647be4461c553
  singleton3 :: () -> b -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b (x :: ()) (y :: b) -> y) -}
520edbc4b6075e835bd6e31f781d89ab
  tailing :: Task2.Traversal' s a -> Task2.Traversal' s a
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ s
                   @ a
                   (dk :: Task2.Traversal' s a)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a a s
                   = dk
                       @ (Task2.FunList a a)
                       (Task2.$fApplicativeFunList @ a @ a)
                       (Task2.singleton @ a @ a)
                 } in
                 \ (eta :: a -> f a) (eta1 :: s) ->
                 case g eta1 of wild {
                   Task2.Done a1
                   -> Task2.fromFunList' @ f @ a @ a @ s $dApplicative eta wild
                   Task2.More a1 b
                   -> Task2.fromFunList'
                        @ f
                        @ a
                        @ a
                        @ s
                        $dApplicative
                        eta
                        (Task2.$fApplicativeFunList_$cfmap
                           @ a
                           @ a
                           @ (a -> s)
                           @ s
                           (\ (g1 :: a -> s) -> g1 a1)
                           b) }) -}
2cbb8cd5ae5cdf744d894847e55fe4c1
  taking ::
    GHC.Types.Int -> Task2.Traversal' s a -> Task2.Traversal' s a
  {- Arity: 3,
     Strictness: <L,U(U)><L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ s
                   @ a
                   (dk :: GHC.Types.Int)
                   (dk1 :: Task2.Traversal' s a)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a a s
                   = dk1
                       @ (Task2.FunList a a)
                       (Task2.$fApplicativeFunList @ a @ a)
                       (Task2.singleton @ a @ a)
                 } in
                 \ (eta :: a -> f a) (eta1 :: s) ->
                 case dk of ww { GHC.Types.I# ww1 ->
                 Task2.fromFunList'
                   @ f
                   @ a
                   @ a
                   @ s
                   $dApplicative
                   eta
                   (Task2.$wf1 @ a @ s ww1 (g eta1)) }) -}
b0d12ee40b03739ca9def5fd9c84351f
  toFunList :: Task2.Traversal s t a b -> s -> Task2.FunList a b t
  {- Arity: 1, Strictness: <C(C(S)),1*C1(C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ s @ t @ a @ b (t1 :: Task2.Traversal s t a b) ->
                 t1
                   @ (Task2.FunList a b)
                   (Task2.$fApplicativeFunList @ a @ b)
                   (Task2.singleton @ a @ b)) -}
dfd8b8748f2d211d5cc92e35d375fd67
  toList :: Task2.FunList a b t -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f825d5fb2088bbe1ad8c659e81ac71b6
  transform ::
    (Task2.FunList a b t -> Task2.FunList a b t)
    -> Task2.Traversal s t a b -> Task2.Traversal s t a b
  {- Arity: 3,
     Strictness: <L,C(U)><L,1*C1(C1(U))><L,U(A,C(U),C(C1(U)),A,A)>,
     Unfolding: (\ @ a
                   @ b
                   @ t
                   @ s
                   (dk :: Task2.FunList a b t -> Task2.FunList a b t)
                   (dk1 :: Task2.Traversal s t a b)
                   @ (f :: * -> *)
                   ($dApplicative :: GHC.Base.Applicative f) ->
                 let {
                   g :: s -> Task2.FunList a b t
                   = dk1
                       @ (Task2.FunList a b)
                       (Task2.$fApplicativeFunList @ a @ b)
                       (Task2.singleton @ a @ b)
                 } in
                 \ (eta :: a -> f b) (eta1 :: s) ->
                 Task2.fromFunList'
                   @ f
                   @ a
                   @ b
                   @ t
                   $dApplicative
                   eta
                   (dk (g eta1))) -}
instance [safe] GHC.Base.Applicative [Task2.FunList]
  = Task2.$fApplicativeFunList
instance [safe] GHC.Base.Functor [Task2.FunList]
  = Task2.$fFunctorFunList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

